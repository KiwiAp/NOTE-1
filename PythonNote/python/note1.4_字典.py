"""
字典dictionary:

可以把对象作为字典的值！

字典是另一种可变容器模型，且可存储任意类型对象。
字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示：
dict = {key1 : value1, key2 : value2 }

键必须是唯一的，但值则不必。
值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组(不能嵌套列表)。

(一) 字典的基本处理
1.1 添加键
dict[newkey] = newvalue

1.2 删除键
del dict[key]

1.3 查询键
a = key in dict

1.4 for i in dict: - 迭代、历遍dict中所有元素

(二) 字典的函数和方法

查询类：
len() - 计算字典元素个数，即键的总数
dict.get() - 返回指定键的值，如果值不在字典中返回default值
dict.items() - 以列表返回可遍历的(键, 值)  元组 数组   
dict.keys() - 以列表返回一个字典所有的键         #用list可以转化为列表
dict.values() - 以列表返回字典中的所有值

处理类:
dict.clear() - 删除字典内所有元素
dict.copy() - 返回一个字典的浅复制    *请见note_1.2列表.py
dict.fromkeys() - 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
dict.setdefault() - 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
#一种骚气的玩法:
>>> d = {}
>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
>>> for k, v in s:
...     d.setdefault(k, []).append(v)
...
>>> sorted(d.items())
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
#collection.defaultdict也可以做类似的事情,而且做得更好
dict.update() - 把字典dict2的键/值对更新到dict里,相当于加号,若值有冲突遵循update里面的,但dict格式本身不支持加号
pop() - 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值
popitem() - 随机返回并删除字典中的一对键和值(一般删除末尾对)。

(三) 字典的嵌套
字典是支持无限极嵌套的，如下面代码：
citys={
    '北京':{
        '朝阳':['国贸','CBD','天阶','我爱我家','链接地产'],
        '海淀':['圆明园','苏州街','中关村','北京大学'],
        '昌平':['沙河','南口','小汤山',],
        '怀柔':['桃花','梅花','大山'],
        '密云':['密云A','密云B','密云C']
    },
    '河北':{
        '石家庄':['石家庄A','石家庄B','石家庄C','石家庄D','石家庄E'],
        '张家口':['张家口A','张家口B','张家口C'],
        '承德':['承德A','承德B','承德C','承德D']
    }
}

(四)字典的创建
>>> a = dict(A=1, Z=-1)
>>> b = {'A': 1, 'Z': -1}
>>> c = dict(zip(['A', 'Z'], [1, -1]))
>>> d = dict([('A', 1), ('Z', -1)])
>>> e = dict({'Z': -1, 'A': 1})